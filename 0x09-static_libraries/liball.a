!<arch>
0-isupper.c/    0           0     0     644     233       `
#include <stdio.h>
#include "main.h"

/**
* _isupper - check if an alphabet is in uppercase
* @c: alphabet to be checked
* Return: 0 (success)
*/


int _isupper(int c)
{
if (c >= 65 && c <= 90)
{
return (1);
}
else
{
return (0);
}
}

0-memset.c/     0           0     0     644     299       `
#include <stdio.h>
#include "main.h"

/**
* _memset - Enrty point
* @s: pointer to memory area
* @b: byte
* @n: number of memory spaces to be filled
* Return: Always 0 (success)
*/


char *_memset(char *s, char b, unsigned int n)
{
unsigned int i = 0;
while (i < n)
{
s[i] = b;
i++;
}
return (s);
}

0-strcat.c/     0           0     0     644     367       `
#include <stdio.h>
#include "main.h"

/**
* _strcat - appends text to the end of a string
* @dest: initial string
* @src: string to be appended
* Return: returns a pointer to dest
*/

char *_strcat(char *dest, char *src)
{
int i = 0, a = 0;
while (dest[i] != '\0')
{
i++;
}
while (src[a] != '\0')
{
dest[i + a] = src[a];
a++;
}
dest[i + a] = '\0';
return (dest);
}



100-atoi.c/     0           0     0     644     850       `
#include <stdio.h>
#include "main.h"

/**
 *mapint - maps a character to its integer form
 *@a: character to be mapped
 *Return: the integer version of the char
 */

int mapint(char a)
{
	if (a >= 48 && a <= 57)
		return ((int)a - 48);
	return (0);
}
/**
 * isDigit - returns true if i is a number
 * @i: integer i
 * Return: true if number, false if not
 */
int isDigit(char i)
{
	return (i >= '0' && i <= '9');
}

/**
 * _atoi - converts a string to integer
 * @s: string s
 * Return: returns parsed integer
 */
int _atoi(char *s)
{
	unsigned int num = 0, sign = 1, started = 0;

	while (*s)
	{
		/*if a number is already countign and a non number is found break*/
		if (started && !isDigit(*s))
			break;
		if (*s == '-')
			sign *= -1;
		if (isDigit(*s))
		{
			started = 1;
			num =  num * 10 + mapint(*s);
		}
		s++;
	}
	return (sign * num);
}
1-isdigit.c/    0           0     0     644     228       `
#include <stdio.h>
#include "main.h"

/**
* _isdigit - check if a character is a digit
* @c: character to be checked
* Return: 0 (success)
*/

int _isdigit(int c)
{
if (c >= 48 && c <= 57)
{
return (1);
}
else
{
return (0);
}
}
1-memcpy.c/     0           0     0     644     346       `
#include <stdio.h>
#include "main.h"

/**
* _memcpy - unction fills the first n bytes of the memory
* @dest: destination
* @src: source
* @n: number of memory spaces to be filled
* Return: Always 0 (success)
*/


char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i = 0;
while (i < n)
{
dest[i] = src[i];
i++;
}
return (dest);
}
1-strncat.c/    0           0     0     644     447       `
#include <stdio.h>
#include "main.h"

/**
* _strncat - appends text to the end of a string
* @dest: initial string
* @src: string to be appended
* @n: number of characters to concatenate
* Return: returns a pointer to dest
*/


char *_strncat(char *dest, char *src, int n)
{
int i = 0, a = 0;
while (dest[i] != '\0')
{
i++;
}
while (src[a] != '\0')
{
if (a < n)
{
dest[i + a] = src[a];
}
a++;
}
if (a < n)
{
dest[i + a] = '\0';
}
return (dest);
}

2-strchr.c/     0           0     0     644     292       `
#include <stdio.h>
#include "main.h"


/**
* _strchr - unction fills the first n bytes of the memory
* @s: destination
* @c: source
* Return: Always 0 (Success)
*/

char *_strchr(char *s, char c)
{
int i;
for (i = 0; s[i] >= '\0'; i++)
{
if (s[i] == c)
{
return (s + i);
}
}
return (NULL);
}
2-strlen.c/     0           0     0     644     216       `
#include <stdio.h>
#include "main.h"
/**
* _strlen - returns the length of a string
* @s:  string to be counted
* Return: always 0
*/

int _strlen(char *s)
{
int i = 0;
while (*s != '\0')
{
i++;
s++;
}
return (i);
}
2-strncpy.c/    0           0     0     644     369       `
#include "main.h"
#include <stdio.h>

/**
 * _strncpy - check the code for Holberton School students.
 *@dest : variable
 *@src : variable
 *@n : the integer
 * Return: Concatinated string.
 */

char *_strncpy(char *dest, char *src, int n)
{
int i;
for (i = 0; src[i] != '\0' && i < n; ++i)
{
dest[i] = src[i];
}
while (i < n)
{
dest[i] = '\0';
i++;
}
return (dest);
}

3-islower.c/    0           0     0     644     218       `
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
* _islower - Entry Point
* Return: 0 (success)
* @c:the alphabet
*/

int _islower(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}
}
3-puts.c/       0           0     0     644     222       `
#include <stdio.h>
#include "main.h"

/**
* _puts - print a string
* @str: string to be printed
* Return: always 0
*/

void _puts(char *str)
{
int i;
for (i = 0; str[i] != '\0'; i++)
{
_putchar(str[i]);
}
putchar('\n');
}
3-strcmp.c/     0           0     0     644     483       `
#include <stdio.h>
#include "main.h"

/**
* _strcmp - compares two strings and returns the difference
* between the first unequal strings
* @s1: string 1
* @s2: string 2
* Return: returns an int
*/


int _strcmp(char *s1, char *s2)
{
int i = 0, j = 0;
while (s1[i] != '\0')
{
while (s2[j] != '\0')
{
if (s1[i] != s2[j])
{
if (s1[i] == ' ')
{
return (0 - s2[j]);
}
else if (s2[j] == ' ')
{
return (s1[i] - 0);
}
else
{
return (s1[i] - s2[j]);
}
}
else
{
i++;
j++;
}
}
}
return (0);
}

3-strspn.c/     0           0     0     644     421       `
#include <stdio.h>
#include "main.h"

/**
* _strspn - unction fills the first n bytes of the memory
* @s: destination
* @accept: source
* Return: unsigned int
*/

unsigned int _strspn(char *s, char *accept)
{
int i, j, check;
unsigned int n = 0;
for (i = 0; s[i] != '\0'; i++)
{
check = 0;
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
{
n++;
check = 1;
}
}
if (check == 0)
{
return (n);
}
}
return (n);
}

4-isalpha.c/    0           0     0     644     279       `
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
* _isalpha - Entry Point
*
* @c: parameter to be checked
* Return: 0 (success)
*/

int _isalpha(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
else if (c >= 'A' && c <= 'Z')
{
return (1);
}
else
{
return (0);
}
}

4-strpbrk.c/    0           0     0     644     371       `
#include <stdio.h>
#include "main.h"

/**
* _strpbrk - function locates the first occurrence of string accept
* @s: destination
* @accept: source
* Return: pointer to the byte in s
*/

char *_strpbrk(char *s, char *accept)
{
int i, j;

for (i = 0; s[i] != '\0'; i++)
{
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
{
return (s + i);
}
}
}
return (NULL);
}

5-strstr.c/     0           0     0     644     519       `
#include <stdio.h>
#include "main.h"

/**
* _strstr - function locates a substring in a string
* @haystack: string
* @needle: substring
* Return: pointer to the substring found in string haystack
*/

char *_strstr(char *haystack, char *needle)
{
int i, j, check;
for (i = 0; haystack[i] != '\0'; i++)
{
check = 0;
if (haystack[i] == needle[0])
{
for (j = 0; needle[j] != '\0'; j++)
{
if (haystack[i + j] == needle[j])
{
check = 1;
}
else
{
check = 0;
}
}
if (check == 1)
{
return (haystack + i);
}
}
}
return (NULL);
}

6-abs.c/        0           0     0     644     214       `
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
* _abs - Entry Point
*
* @c: parameter to be checked
* Return: 0 (success)
*/

int _abs(int c)
{
if (c < 0)
{
return (c * -1);
}
else
{
return (c);
}
}
9-strcpy.c/     0           0     0     644     308       `
#include <stdio.h>
#include "main.h"

/**
* _strcpy - copy string from src to dest
* @dest: pointer to destination
* @src: pointer to source
* Return:  a pointer to dest
*/

char *_strcpy(char *dest, char *src)
{
int i = 0;
while (src[i] != '\0')
{
dest[i] = src[i];
i++;
}
dest[i] = '\0';
return (dest);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

